buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: project.fg_version, changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

//apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.archive_base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(project.java_version)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    runs {
        client {
            workingDirectory file('run')

            mods {
                additionalbars {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('run')

            mods {
                additionalbars {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('run')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'additionalbars', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                additionalbars {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": project.name,
                "Specification-Vendor": "AdditionalBars",
                "Specification-Version": "${project.mod_version}", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${project.mod_version}",
                "Implementation-Vendor" :"AdditionalBars",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
